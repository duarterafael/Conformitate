package gui;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;

import javax.swing.JOptionPane;

import managers.BusinessProcessModelNotationModelerProcessManager;
import managers.ExecutionManager;
import managers.NotepadManager;
import managers.UseProcessManager;

import org.argouml.application.Main;

import poli.mestrado.parser.bpmn2use.BpmnFileManager;
import poli.mestrado.parser.uml2use.UmlFileManager;
import poli.mestrado.parser.util.Constants;
import extras.MessageConsole;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rafael
 */
public class MainScreen extends javax.swing.JFrame {
	   // Variables declaration - do not modify     
	private static MainScreen instance = null;
    private javax.swing.JToggleButton asslScriptBtn;
    private javax.swing.JToggleButton bussinessProcessModelerToolBtn;
    private javax.swing.JComboBox caminhoCB;
    private javax.swing.JToggleButton conceptModelerToolBtn;
    private javax.swing.JToggleButton configurationManualBtn;
    private javax.swing.JToggleButton configurationRandomBtn;
    private javax.swing.JTextPane delayTP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton manualRB;
    private javax.swing.JRadioButton automaticRB;
    private javax.swing.JToggleButton pauseExecBtn;
    private javax.swing.JToggleButton playExecBtn;
    private javax.swing.JToggleButton stopExecBtn;
    private javax.swing.JToggleButton useScriptBtn;
    private javax.swing.JToggleButton useToolBtn;
    private javax.swing.JTextPane logTxtArea;
    private MessageConsole mc;
    
    private Integer delayValue;
    private ExecutionManager executionManager;
    // End of variables declaration                   

    /**
     * Creates new form MainScreen
     */
    private MainScreen() {
    	this.setResizable(false);
        initComponents();
    }

    
    public static MainScreen getInstance(){
		if(instance == null){
			instance = new MainScreen();
		}
		return instance;
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        conceptModelerToolBtn = new javax.swing.JToggleButton();
        bussinessProcessModelerToolBtn = new javax.swing.JToggleButton();
        useToolBtn = new javax.swing.JToggleButton();
        useToolBtn.setVisible(false);
        useScriptBtn = new javax.swing.JToggleButton();
        useScriptBtn.setVisible(false);
        asslScriptBtn = new javax.swing.JToggleButton();
        asslScriptBtn.setVisible(false);
        jLabel1 = new javax.swing.JLabel();
        configurationRandomBtn = new javax.swing.JToggleButton();
        configurationManualBtn = new javax.swing.JToggleButton();
        configurationManualBtn.setVisible(false);
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setVisible(false);
        jScrollPane1 = new javax.swing.JScrollPane();
        logTxtArea = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        automaticRB = new javax.swing.JRadioButton();
        manualRB = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        delayTP = new javax.swing.JTextPane();
        playExecBtn = new javax.swing.JToggleButton();
        pauseExecBtn = new javax.swing.JToggleButton();
        stopExecBtn = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        caminhoCB = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();

        
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        conceptModelerToolBtn.setIcon(new javax.swing.ImageIcon("./imgs/concepModelIcon.png")); // NOI18N
        conceptModelerToolBtn.setActionCommand("conceptModelerToolBtn");
        conceptModelerToolBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conceptModelerToolBtnActionPerformed(evt);
            }
        });

        bussinessProcessModelerToolBtn.setEnabled(false);
        bussinessProcessModelerToolBtn.setIcon(new javax.swing.ImageIcon("./imgs/bussinesProcessModel.png")); // NOI18N
        bussinessProcessModelerToolBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bussinessProcessModelerToolBtnActionPerformed(evt);
            }
        });

        useToolBtn.setEnabled(false);
        useToolBtn.setIcon(new javax.swing.ImageIcon("./imgs/useTool.png")); // NOI18N
        useToolBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useToolBtnActionPerformed(evt);
            }
        });

        useScriptBtn.setEnabled(false);
        useScriptBtn.setIcon(new javax.swing.ImageIcon("./imgs/useScripBtn.png")); // NOI18N
        useScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useScriptBtnActionPerformed(evt);
            }
        });
        
        asslScriptBtn.setEnabled(false);
        asslScriptBtn.setIcon(new javax.swing.ImageIcon("./imgs/asslScriptBtn.png")); // NOI18N
        asslScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asslScriptBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Modelagem");

        configurationRandomBtn.setEnabled(false);
        configurationRandomBtn.setIcon(new javax.swing.ImageIcon("./imgs/config_radom.png")); // NOI18N
        configurationRandomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	mc.redirectErr(Color.RED, System.err);
            	configurationRandomBtnActionPerformed(evt);
            }
        });

//        configurationManualBtn.setEnabled(false);
        configurationManualBtn.setIcon(new javax.swing.ImageIcon("./imgs/config_manual.png")); // NOI18N
        configurationManualBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
                configurationManualBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Log");
        jLabel2.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(arg0.getButton() == 3){
					logTxtArea.setText("");
				}
			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
           
        });

        jLabel3.setText("Configuração");

        logTxtArea.setAutoscrolls(false);
        logTxtArea.setFocusTraversalPolicyProvider(true);
        logTxtArea.setEditable(false);
        jScrollPane1.setViewportView(logTxtArea);
        logTxtArea.setCaretPosition(logTxtArea.getDocument().getLength());
        
        
        mc = new MessageConsole(logTxtArea);
        mc.setMessageLines(100);
        mc.redirectOut(null, System.out);
        
        
        jLabel4.setText("Execução");
        jLabel4.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(arg0.getButton() == 3){
					executionManager = new ExecutionManager();
					caminhoCB.setModel(new javax.swing.DefaultComboBoxModel(executionManager.getPathName()));
				}
			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
           
        });

        automaticRB.setEnabled(false);
        automaticRB.setText("Automatico");
        automaticRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticRBActionPerformed(evt);
            }
        });

        manualRB.setEnabled(false);
        manualRB.setSelected(true);
        manualRB.setText("Manual");
        manualRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualRBActionPerformed(evt);
            }
        });

        jLabel5.setText("Delay(seg):");
        
        
       delayTP.setEnabled(false);
       delayTP.setText("1");
       delayTP.addFocusListener(new java.awt.event.FocusAdapter() {
           public void focusLost(java.awt.event.FocusEvent evt) {
				try {
					delayValue = new Integer(delayTP.getText());
				} catch (java.lang.NumberFormatException e) {
					 JOptionPane.showMessageDialog(MainScreen.this, "Apenas valores inteiros", "", JOptionPane.ERROR_MESSAGE);
					 delayTP.setText("1");
				}
           }
       });
//       jScrollPane2.setViewportView(delayTP);
       jScrollPane2.setVisible(false);

        playExecBtn.setEnabled(false);
//        playExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/playBtn.png")); // NOI18N
        playExecBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playExecBtnActionPerformed(evt);
            }
        });

        pauseExecBtn.setEnabled(false);
//        pauseExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/pauseBtn.png")); // NOI18N
        pauseExecBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseExecBtnActionPerformed(evt);
            }
        });

        stopExecBtn.setEnabled(false);
//        stopExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/stopBtn.png")); // NOI18N
        stopExecBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopExecBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Caminho");
        jLabel6.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(arg0.getButton() == 3){
					executionManager = new ExecutionManager();
					caminhoCB.setModel(new javax.swing.DefaultComboBoxModel(executionManager.getPathName()));
				}
			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
           
        });

        caminhoCB.setEnabled(false);
//        caminhoCB.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                caminhoCBActionPerformed(evt);
//            }
//        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useScriptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asslScriptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                        .addComponent(configurationRandomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(configurationManualBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        )
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(conceptModelerToolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(configurationRandomBtn
//                        		bussinessProcessModelerToolBtn
                        		, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(
//                        		useToolBtn
//                        		configurationRandomBtn
                        		bussinessProcessModelerToolBtn
                        		, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
//                                        .addComponent(automaticRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                    .addComponent(manualRB)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(caminhoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(playExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pauseExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(conceptModelerToolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configurationRandomBtn
//                    		bussinessProcessModelerToolBtn
                    		, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(//useToolBtn
//                    		configurationRandomBtn
                    		bussinessProcessModelerToolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                    .addComponent(configurationRandomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useScriptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configurationManualBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asslScriptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pauseExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stopExecBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(caminhoCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
//                        .addComponent(manualRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
//                            .addComponent(automaticRB)
//                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void useScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	File useFile = new File(Constants.EXPORT_FOLDER+"/"+Constants.CLASS_DIAGRAM_USE_FILE_NAME);
    	if(useFile.exists()){
    		System.out.println("Opening concept model in use format.");
    		NotepadManager.getInstance().openModel(useFile);
    	}else{
    		System.err.println("ERRO: Concept model in use format not fond!");
    	}
    }                                            
                                    

    private void conceptModelerToolBtnActionPerformed(java.awt.event.ActionEvent evt) {     
    	mc.redirectOut(null, null);
    	System.out.println("Abrindo a ferramenta de modelagem conceitual");
    	
    	new ThreadConceptTool().start();
    	
    	
//    	ThreadClassDiagramFileExist t = new ThreadClassDiagramFileExist();
//		t.start(); 
//		synchronized(this){ 
//			try{ 
//				System.out.println("Aguardando o arquivo ser criado"); 
//				t.wait(); 
//			}catch(InterruptedException e){ 
//				e.printStackTrace(); 
//			} 
//			System.out.println("--->O Arquivo foi criado"); 
			bussinessProcessModelerToolBtn.setEnabled(true);
			configurationRandomBtn.setEnabled(true);
			configurationManualBtn.setEnabled(true);
			bussinessProcessModelerToolBtn.setEnabled(true);
			useScriptBtn.setEnabled(true);
//		}
 	
    	
    	
    	
    }                                                     

    @SuppressWarnings({ "unchecked", "rawtypes" })
	private void bussinessProcessModelerToolBtnActionPerformed(java.awt.event.ActionEvent evt) {     
//    	asslScriptBtn.setEnabled(true);
//    	useToolBtn.setEnabled(true);
    	File file = new File(UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().
    			substring(0, UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().lastIndexOf(File.separator)+1)+Constants.CLASS_DIAGRAM_SERIALIZABEL_FILE_NAME);
    	if(file.exists()){
    		if(!BusinessProcessModelNotationModelerProcessManager.getInstance().isAlive()){
        		System.out.println("Abrindo ferramenta de modelagem de processo de negócio.");
        		BusinessProcessModelNotationModelerProcessManager.cleanProcess();
        		BusinessProcessModelNotationModelerProcessManager.getInstance();
        	}
        	
        	String path = UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath()
        			.substring(0, UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().lastIndexOf(File.separator)+1)+
        			Constants.BPMN_FILE_NAME;
        	File f = new File(path);
        	while(!f.exists()){}
        	caminhoCB.setEnabled(true);
        	executionManager = new ExecutionManager();
        	caminhoCB.setModel(new javax.swing.DefaultComboBoxModel(executionManager.getPathName()));

        	manualRB.setEnabled(true);
        	manualRB.setSelected(true);
        	automaticRB.setEnabled(true);
			manualRBActionPerformed(null);
    	}else{
    		System.out.println("Antes de abrir a ferramente de modelage de processo de negócio é necessario exportar o diagrama de classe para o formato USE.");
    	}
    	
    	
    }
    @SuppressWarnings({ "rawtypes", "unchecked" })
	private void useToolBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	caminhoCB.setEnabled(true);

    	playExecBtn.setEnabled(true);
    	manualRB.setEnabled(true);
    	automaticRB.setEnabled(true);

    	System.out.println("Opening USE tool....");
    	UseProcessManager.getInstance();
    }                                          

    private void asslScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
    	File asslFolder = new File(Constants.EXPORT_FOLDER+"/"+Constants.ASSL_SCRIPT_FOLDER);
    	if(asslFolder.exists() && asslFolder.listFiles().length  != 0){
    		System.out.println("Opening bussiness process model in assl format.");
    		NotepadManager.getInstance().openModel(asslFolder.listFiles());
    	}else{
    		System.err.println("ERRO: Bussiness process model in assl format not fond.");
    	}
    }                                             

    private void configurationRandomBtnActionPerformed(java.awt.event.ActionEvent evt) {   
    	File f = new File(UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().
    			substring(0, UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().lastIndexOf(File.separator)+1)+Constants.CLASS_DIAGRAM_SERIALIZABEL_FILE_NAME);
    	if(f.exists()){
    		ConfiguraManulaScreen dialog = new ConfiguraManulaScreen(new javax.swing.JFrame(), true);
    		dialog.setVisible(true);
    	}else{
    		
    		System.out.println("Antes de definir o intervalo dos valores é necessario exportar o diagrama de classe para o formato USE.");
    	}
    	
    	
    }                                                      

    private void configurationManualBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                       
    }                                                      


    private void automaticRBActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	manualRB.setSelected(false);
    	delayTP.setEnabled(true);

    	playExecBtn.setEnabled(true);
        pauseExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/pauseBtn.png")); // NOI18N
        playExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/playBtn.png")); // NOI18N
        stopExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/stopBtn.png")); // NOI18N
    	
    } 
    
    private void manualRBActionPerformed(java.awt.event.ActionEvent evt) {       
    	 automaticRB.setSelected(false);
    	 delayTP.setEnabled(false);
    	 
    	 playExecBtn.setEnabled(true);
    	 playExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/useBtn.png")); // NOI18N
         pauseExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/stepbystepBtn.png")); // NOI18N
         stopExecBtn.setIcon(new javax.swing.ImageIcon("./imgs/stopBtn.png")); // NOI18N
    }                                             

    private void playExecBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	manualRB.setEnabled(false);
    	automaticRB.setEnabled(false);
    	if(manualRB.isSelected()){
    		if(((String)caminhoCB.getSelectedItem()).equalsIgnoreCase(Constants.ALL_PATHS_NAMES)){
    			System.out.println("Futura implementação");
    		}else{
	    		playExecBtn.setEnabled(false);
	    		pauseExecBtn.setEnabled(true);
	    		stopExecBtn.setEnabled(true);
	
	    		executionManager.startManualExecution((String)caminhoCB.getSelectedItem());
    		}
    	}else{
    		playExecBtn.setEnabled(false);
    		stopExecBtn.setEnabled(true);
    		pauseExecBtn.setEnabled(true);

    		UseProcessManager.getInstance();
    		delayValue = new Integer(delayTP.getText());
    		executionManager.startAutomaticExecution((String)caminhoCB.getSelectedItem(), delayValue);
    	}
    }                                           

    private void pauseExecBtnActionPerformed(java.awt.event.ActionEvent evt) { 
    	if(manualRB.isSelected()){
    		executionManager.executeNextStep();
    		stopExecBtn.setEnabled(true);
    	}else{
    		executionManager.setCanExecute(true);
    		
	    	playExecBtn.setEnabled(true);
	    	pauseExecBtn.setEnabled(false);
	    	stopExecBtn.setEnabled(false);
    	}
    	
   	}                                            

    private void stopExecBtnActionPerformed(java.awt.event.ActionEvent evt) {  
    	manualRB.setEnabled(true);
    	automaticRB.setEnabled(true);
    	if(manualRB.isSelected()){
    		playExecBtn.setEnabled(true);
	    	stopExecBtn.setEnabled(false);
	    	pauseExecBtn.setEnabled(false);
    	}else{
    		manualRB.setEnabled(true);
        	automaticRB.setEnabled(true);
	    	playExecBtn.setEnabled(true);
	    	pauseExecBtn.setEnabled(false);
	    	stopExecBtn.setEnabled(false);
    	}
    	executionManager.stopExecution(true);
    }                                           

//    private void caminhoCBActionPerformed(java.awt.event.ActionEvent evt) {                                          
//        // TODO add your handling code here:
//    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	deleteFiles();
            	MainScreen ms = new MainScreen();
            	ms.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    	BusinessProcessModelNotationModelerProcessManager.getInstance().close();
                        System.exit(0);
                    }
                });
            	ms.setVisible(true);
            }
        });
    }
    
    
	public static void deleteFiles() {
		String path = BpmnFileManager.getInstance().getExportFile().getAbsolutePath().substring(0, BpmnFileManager.getInstance().getExportFile().getAbsolutePath().lastIndexOf(File.separator));
		File auxDir = new File(path);
		if(auxDir.exists() && auxDir.isDirectory()){
			for (File oldAsslFile : auxDir.listFiles()) {
				oldAsslFile.delete();
			}
		}
	}

 
}

 class ThreadConceptTool extends Thread { 
	 
	 @Override 
	 public void run(){ 
		 synchronized(this){ 
			String[] args = new String[0];
	    	Main.main(args);
			notify();
		 } 
		} 
}

 class ThreadClassDiagramFileExist extends Thread { 
		int total; 
		@Override public void run(){ 
			synchronized (this) {
				String path = UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath()
		    			.substring(0, UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().lastIndexOf(File.separator)+1)+
		    			Constants.CLASS_DIAGRAM_SERIALIZABEL_FILE_NAME;
		    	File f = new File(path);
				while(!f.exists()){
					System.out.println("Arquivo não existe");
					try {
						this.sleep(1000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				System.out.println("Arquivo existe");
				notifyAll();
			}
		}
}
