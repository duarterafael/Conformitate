/* $Id$
 *******************************************************************************
 * Copyright (c) 2014 Contributors - see below
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Rafael
 *******************************************************************************
 */

package org.argouml.ui;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Icon;

import org.argouml.application.helpers.ResourceLoaderWrapper;
import org.argouml.configuration.Configuration;
import org.argouml.i18n.Translator;
import org.argouml.persistence.PersistenceManager;

import poli.mestrado.parser.uml2use.GenereteSerializable;
import poli.mestrado.parser.uml2use.UmlFileManager;
import poli.mestrado.parser.uml2use.ParserUmlHelper;
import poli.mestrado.parser.uml2use.tag.ModelTag;
import poli.mestrado.parser.util.Constants;

public class ActionExportUSE extends AbstractAction{

    private String name;
    /**
     * The constructor.
     */
    public ActionExportUSE() {
        super(Translator.localize("action.export-project-as-use"));
        name = "action.export-project-as-use";
        // Set the tooltip string:
        putValue(Action.SHORT_DESCRIPTION, Translator.localize(name));
        // Set the icon:
        Icon icon = ResourceLoaderWrapper.lookupIcon(name);
        putValue(Action.SMALL_ICON, icon);
    }

    @Override
    public void actionPerformed(ActionEvent arg0) {

        File f =  new File(Constants.EXPORT_FOLDER);
        if(f.isDirectory()){
            for (File fChild :  f.listFiles()) {
                fChild.delete();
            }

        }


        PersistenceManager pm = PersistenceManager.getInstance();
        File theFile = UmlFileManager.getInstance().getExportXmiFile(); 



        if (theFile != null) {
            String name = theFile.getName();
            Configuration.setString(
                    PersistenceManager.KEY_PROJECT_NAME_PATH,
                    PersistenceManager.getInstance().getBaseName(
                            theFile.getPath()));
            name = pm.fixXmiExtension(name);
            theFile = new File(theFile.getParent(), name);
            ProjectBrowser.getInstance().trySaveWithProgressMonitor2(false, theFile, false);
        }
        
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
           e.printStackTrace();
        }
        
        try {
            ModelTag model = ParserUmlHelper.getInstance().parserXML2Use();
            ParserUmlHelper.getInstance().saveModel();
            String path = UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().substring(0, UmlFileManager.getInstance().getExportXmiFile().getAbsolutePath().lastIndexOf(File.separator)+1)+Constants.CLASS_DIAGRAM_SERIALIZABEL_FILE_NAME;
            GenereteSerializable.saveModel(path, model);
//            System.out.println(ActionExportUSE.class.getName()+"O modelo "+model.getName()+" foi salvo em "+path+"com sucesso");
        } catch (IOException e) {
            e.printStackTrace();
        }

   

    }
    /**
     * The UID.
     */
    private static final long serialVersionUID = -3445739054369264482L;

}
